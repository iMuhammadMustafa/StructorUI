@use "./variables" as *;
@use "./maps/breakpoints" as *;
@use "sass:math";

$grid-columns: 12 !default;

$grid-gap: (
  0: 0,
  1: 10px,
  2: 20px,
  3: 30px,
  4: 40px,
  5: 50px,
);
$layout: flex-start, center, flex-end, space-between, space-around, space-evenly;

.container {
  margin: 0 auto;
  padding: 0 15px;

  width: 100%;
  max-width: 1200px;

  box-sizing: border-box;
}

.row {
  display: flex;
  flex-flow: row wrap;

  box-sizing: border-box;
}

@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include sm {
  @for $i from 1 through $grid-columns {
    .col-sm-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .col-md-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .col-lg-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-xl-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@each $key, $value in $grid-gap {
  .gap-#{$key} > * {
    padding: $value;
  }
  .gap-#{$key} {
    margin-left: -$value;
    margin-right: -$value;
  }
}

@each $value in $layout {
  .justify-#{$value} {
    justify-content: $value;
  }
  .align-#{$value} {
    align-items: $value;
  }
}
